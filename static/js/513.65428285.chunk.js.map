{"version":3,"file":"static/js/513.65428285.chunk.js","mappings":"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","sources":["webpack://finances-planner/./src/components/Section/Section.module.scss?893f","components/Section/Section.jsx","data/optionsDefault.js","webpack://finances-planner/./src/components/InputForm/InputForm.module.scss?9101","components/InputForm/InputForm.jsx","webpack://finances-planner/./src/components/ResultForm/ResultForm.module.scss?b712","components/ResultForm/ResultForm.jsx","webpack://finances-planner/./src/components/ModalAddBalance/ModalAddBalance.module.scss?6dbb","components/ModalAddBalance/ModalAddBalance.jsx","services/validateObject.js","webpack://finances-planner/./src/components/PlanInputsList/PlanInputsList.module.scss?e7db","components/PlanInputsList/PlanInputsList.jsx","pages/OwnPlanPage/OwnPlanPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"vectorImg\":\"Section_vectorImg__zw3S9\"};","import s from './Section.module.scss';\n\nconst Section = ({ children }) => {\n  return <section className={s.vectorImg}>{children}</section>;\n};\n\nexport default Section;\n","const optionsDefault = [\n  {\n    title: 'RFP of both spouses, ₴',\n    name: 'salary',\n    type: 'text',\n    placeholder: '75 000',\n  },\n  {\n    title: 'Passive income, months, ₴',\n    name: 'passiveIncome',\n    type: 'text',\n    placeholder: 'Enter text',\n  },\n  {\n    title: 'Savings, ₴',\n    name: 'savings',\n    type: 'text',\n    placeholder: 'Enter text',\n  },\n  {\n    title: 'Specify the cost of your future apartment, ₴',\n    name: 'cost',\n    type: 'text',\n    placeholder: '90 000',\n  },\n  {\n    title: 'Specify the number of sq.m. of your future apartment',\n    name: 'footage',\n    type: 'text',\n    placeholder: 'Enter text',\n  },\n  {\n    title: 'Accumulation, %',\n    name: 'procent',\n    type: 'text',\n    placeholder: 'Enter text',\n  },\n];\n\nexport default optionsDefault;\n","// extracted by mini-css-extract-plugin\nexport default {\"label\":\"InputForm_label__xJ7fv\",\"span\":\"InputForm_span__CqJO7\",\"input\":\"InputForm_input__JQ+ft\",\"error\":\"InputForm_error__h3B-n\"};","import { useSelector } from 'react-redux';\nimport s from './InputForm.module.scss';\nimport { selectorIsPlan } from 'redux/plan/planSelectors';\n\nconst InputForm = ({ onChange, options, values, onBlur, errors = [] }) => {\n  const isPlan = useSelector(selectorIsPlan);\n\n  return (\n    <>\n      {options.map((el, index) => (\n        <label className={s.label} key={el.name}>\n          <span className={s.span}>\n            {index + 1 + '. '}\n            {el.title}\n          </span>\n\n          <input\n            required\n            autoComplete=\"off\"\n            className={s.input}\n            type={el.type}\n            name={el.name}\n            value={values[el?.name] || ''}\n            onChange={onChange}\n            onBlur={onBlur}\n            placeholder={el.placeholder}\n            disabled={el.name === 'savings' && isPlan ? true : false}\n          />\n          {errors.includes(el.name) && (\n            <span className={s.error}> invalid value </span>\n          )}\n        </label>\n      ))}\n    </>\n  );\n};\n\nexport default InputForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"box\":\"ResultForm_box__BPZG-\",\"title\":\"ResultForm_title__-zEMh\",\"list\":\"ResultForm_list__lvVlU\",\"item\":\"ResultForm_item__qbVxC\",\"text\":\"ResultForm_text__H+eFW\",\"res\":\"ResultForm_res__5W2t1\",\"buttonFits\":\"ResultForm_buttonFits__LFnXS\",\"buttonBalance\":\"ResultForm_buttonBalance__dlb4b\"};","import { useSelector } from 'react-redux';\nimport { selectorStateResult } from 'redux/plan/planSelectors';\nimport { selectorIsBalance } from 'redux/auth/authSelectors';\nimport s from './ResultForm.module.scss';\n\nconst ResultForm = ({ openModal, onClick }) => {\n  const result = useSelector(selectorStateResult);\n  const isBalance = useSelector(selectorIsBalance);\n\n  return (\n    <div className={s.box}>\n      <h2 className={s.title}>You will have an apartment in:</h2>\n      <ul className={s.list}>\n        <li className={s.item}>\n          <p className={s.text}>Number of years</p>\n          <p className={s.res}>{result.year} years</p>\n        </li>\n        <li className={s.item}>\n          <p className={s.text}>Number of months</p>\n          <p className={s.res}>{result.month} months</p>\n        </li>\n        <li className={s.item}>\n          <button className={s.buttonFits} type=\"button\" onClick={onClick}>\n            Fits\n          </button>\n          {!isBalance && (\n            <button\n              className={s.buttonBalance}\n              type=\"button\"\n              onClick={openModal}\n            >\n              Add Balance\n            </button>\n          )}\n        </li>\n      </ul>\n    </div>\n  );\n};\n\nexport default ResultForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"overlayAddIncome\":\"ModalAddBalance_overlayAddIncome__uiJZA\",\"modalWrapper\":\"ModalAddBalance_modalWrapper__5ApL1\",\"modalAddIncome\":\"ModalAddBalance_modalAddIncome__qYqtL\",\"modalInput\":\"ModalAddBalance_modalInput__LRtN4\",\"btnContainer\":\"ModalAddBalance_btnContainer__cUmYC\",\"btnAdd\":\"ModalAddBalance_btnAdd__Bi-8a\",\"btnClose\":\"ModalAddBalance_btnClose__zyVWf\",\"btnSvg\":\"ModalAddBalance_btnSvg__lAcxc\",\"iconClose\":\"ModalAddBalance_iconClose__HAppv\"};","import Icon from 'components/Icon/Icon';\nimport s from './ModalAddBalance.module.scss';\nimport { createPortal } from 'react-dom';\nimport { useCallback, useEffect, useState } from 'react';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nconst ModalAddBalance = ({ closeModal, text, onSubmit }) => {\n  const [form, setForm] = useState({\n    balance: '',\n  });\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    setForm(p => ({ ...p, [name]: value }));\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit(form);\n    closeModal();\n  };\n\n   const closeModalByEscape = useCallback(\n     e => {\n       if (e.code === 'Escape') {\n         closeModal();\n       }\n     },\n     [closeModal]\n   );\n\n   const closeModalOnBackdrop = e => {\n     if (e.target === e.currentTarget) {\n       closeModal();\n     }\n   };\n\n   useEffect(() => {\n     window.addEventListener('keydown', closeModalByEscape);\n\n     return () => {\n       window.removeEventListener('keydown', closeModalByEscape);\n     };\n   }, [closeModalByEscape]);\n\n  return createPortal(\n    <div className={s.overlayAddIncome} onClick={closeModalOnBackdrop}>\n      <div className={s.modalWrapper}>\n        <form className={s.modalAddIncome} onSubmit={handleSubmit}>\n          <input\n            required\n            className={s.modalInput}\n            autoComplete=\"off\"\n            type=\"text\"\n            name=\"balance\"\n            placeholder={text}\n            value={form.balance}\n            onChange={handleChange}\n            pattern=\"[0-9]*\"\n          />\n\n          <div className={s.btnContainer}>\n            <button className={s.btnAdd} type=\"submit\">\n              Add\n            </button>\n            <button className={s.btnClose} type=\"button\" onClick={closeModal}>\n              Cancel\n            </button>\n          </div>\n        </form>\n        <button className={s.btnSvg} onClick={closeModal}>\n          <Icon\n            name=\"icon-close\"\n            width={24}\n            height={24}\n            className={s.iconClose}\n          />\n        </button>\n      </div>\n    </div>,\n    modalRoot\n  );\n};\n\nexport default ModalAddBalance;\n","function validateObject(obj) {\n  const errors = [];\n\n  for (let key in obj) {\n    if (!validateNumber(obj[key])) {\n      errors.push(key);\n    }\n\n    if (key === 'procent' && obj[key] > 100) {\n      errors.push(key);\n    }\n  }\n\n  if (errors.length > 0) {\n    return { isValid: false, errors };\n  }\n\n  return { isValid: true };\n}\n\nfunction validateNumber(value) {\n  if (typeof value === 'number') {\n    value = value.toString();\n  }\n  if (typeof value !== 'string') return false;\n  const trimmedValue = value.trim();\n  if (!trimmedValue) return false;\n  const regex = /^[+-]?\\d+(\\.\\d+)?$/;\n  if (!regex.test(trimmedValue)) return false;\n  const parsedValue = parseFloat(trimmedValue);\n  if (parsedValue <= 0) return false;\n  if (parsedValue !== parseFloat(value)) return false;\n  return true;\n}\n\nexport default validateObject;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"PlanInputsList_form__Oi2eI\",\"p\":\"PlanInputsList_p__bnCRJ\"};","import { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectorIsPlan,\n  selectorPlanIsLoading,\n  selectorStatePlan,\n} from 'redux/plan/planSelectors';\nimport {\n  calcPersonalPlan,\n  preCalcPersonalPlan,\n  updatePersonalPlan,\n} from 'redux/plan/planOperations';\nimport optionsDefault from 'data/optionsDefault';\nimport InputForm from 'components/InputForm/InputForm';\nimport ResultForm from 'components/ResultForm/ResultForm';\nimport ModalAddBalance from 'components/ModalAddBalance/ModalAddBalance';\nimport { addUserBalance } from 'redux/auth/authOperations';\nimport { selectorIsLoggedIn } from 'redux/auth/authSelectors';\nimport validateObject from 'services/validateObject';\nimport s from './PlanInputsList.module.scss';\nimport Loader from 'components/Loader/Loader';\n\nconst PlanInputsList = () => {\n  const dispatch = useDispatch();\n  const formData = useSelector(selectorStatePlan);\n  const isLoggedIn = useSelector(selectorIsLoggedIn);\n  const isLoading = useSelector(selectorPlanIsLoading);\n  const [inputs, setInputs] = useState(formData);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isBlurDirty, setIsBlurDirty] = useState(false);\n  const [isFitsDirty, setIsFitsDirty] = useState(false);\n  const [error, setError] = useState([]);\n  const isPlan = useSelector(selectorIsPlan);\n\n  useEffect(() => {\n    isLoggedIn && setInputs(formData);\n  }, [formData, isLoggedIn]);\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    setInputs(values => {\n      const newInputs = { ...values, [name]: value };\n      setIsBlurDirty(true);\n      setIsFitsDirty(true);\n      return newInputs;\n    });\n  };\n\n  const isValidObjFunc = () => {\n    const { isValid, errors } = validateObject(inputs);\n    return { isValid, errors };\n  };\n\n  const handlerBlur = () => {\n    const isComplete = Object.values(inputs).every(value => value !== '');\n\n    const { isValid, errors } = isValidObjFunc();\n    isComplete && setError(errors);\n\n    if (isComplete && isValid && isBlurDirty) {\n      for (let key in inputs) {\n        if (typeof inputs[key] === 'string') {\n          inputs[key] = Number(inputs[key]);\n        }\n      }\n\n      dispatch(preCalcPersonalPlan(inputs));\n      setIsBlurDirty(false);\n    }\n  };\n\n  const handleAddBalance = dataForm => {\n    const pBalance = { balance: Number(dataForm.balance) };\n    dispatch(addUserBalance(pBalance));\n  };\n\n  const handleFits = () => {\n    const { isValid } = isValidObjFunc();\n\n    if (isValid && !isPlan) {\n      dispatch(calcPersonalPlan(inputs));\n    } else if (isValid && isFitsDirty) {\n      dispatch(updatePersonalPlan(inputs));\n      setIsFitsDirty(false);\n    }\n  };\n\n  const openModal = () => setIsModalOpen(true);\n  const closeModal = () => setIsModalOpen(false);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      <form className={s.form}>\n        <InputForm\n          onChange={handleChange}\n          options={optionsDefault}\n          values={inputs}\n          onBlur={handlerBlur}\n          errors={error}\n        />\n      </form>\n\n      <p className={s.p}>\n        Specify the percentage that you would like to accumulate per month from\n        the total amount of income and you will see when you reach the goal\n      </p>\n\n      <ResultForm openModal={openModal} onClick={handleFits} />\n\n      {isModalOpen && (\n        <ModalAddBalance\n          text=\"Enter balance\"\n          closeModal={closeModal}\n          onSubmit={handleAddBalance}\n        />\n      )}\n    </>\n  );\n};\n\nexport default PlanInputsList;\n","import Container from 'components/Container/Container';\nimport PlanInputsList from 'components/PlanInputsList/PlanInputsList';\nimport Section from 'components/Section/Section';\n\nconst OwnPlanPage = () => {\n  return (\n    <Section>\n      <Container>\n        <PlanInputsList />\n      </Container>\n    </Section>\n  );\n};\n\nexport default OwnPlanPage;\n"],"names":["_ref","children","_jsx","className","s","title","name","type","placeholder","onChange","options","values","onBlur","errors","isPlan","useSelector","selectorIsPlan","_Fragment","map","el","index","_jsxs","required","autoComplete","value","disabled","includes","openModal","onClick","result","selectorStateResult","isBalance","selectorIsBalance","year","month","modalRoot","document","querySelector","closeModal","text","onSubmit","form","setForm","useState","balance","closeModalByEscape","useCallback","e","code","useEffect","window","addEventListener","removeEventListener","createPortal","target","currentTarget","preventDefault","p","pattern","Icon","width","height","validateNumber","toString","trimmedValue","trim","test","parsedValue","parseFloat","obj","key","push","length","isValid","PlanInputsList","dispatch","useDispatch","formData","selectorStatePlan","isLoggedIn","selectorIsLoggedIn","isLoading","selectorPlanIsLoading","inputs","setInputs","isModalOpen","setIsModalOpen","isBlurDirty","setIsBlurDirty","isFitsDirty","setIsFitsDirty","error","setError","isValidObjFunc","validateObject","Loader","InputForm","newInputs","optionsDefault","handlerBlur","isComplete","Object","every","Number","preCalcPersonalPlan","ResultForm","handleFits","calcPersonalPlan","updatePersonalPlan","ModalAddBalance","dataForm","pBalance","addUserBalance","OwnPlanPage","Section","Container"],"sourceRoot":""}