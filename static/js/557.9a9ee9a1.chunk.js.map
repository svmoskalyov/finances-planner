{"version":3,"file":"static/js/557.9a9ee9a1.chunk.js","mappings":"6PAgBA,MAAMA,EAAS,CACb,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAmFF,EAhFiBC,KACf,MAAMC,GAAWC,EAAAA,EAAAA,OACVC,EAAcC,IAAmBC,EAAAA,EAAAA,UAAS,IAAIC,MAC/CC,GAAaC,EAAAA,EAAAA,IAAYC,EAAAA,IACzBC,GAAWC,EAAAA,EAAAA,OACVC,EAASC,IAAcR,EAAAA,EAAAA,WAAS,GAEjCS,EAAiBJ,EAASK,SAASC,SAAS,aAElDC,EAAAA,EAAAA,YAAU,KACJP,EAASK,SAASC,SAAS,iBAC7BT,GAAcN,GAASiB,EAAAA,EAAAA,IAAeC,EAAkBhB,KAEtDO,EAASK,SAASC,SAAS,eAC7BT,GACEN,GAASmB,EAAAA,EAAAA,IAAkBD,EAAkBhB,KAE7CO,EAASK,SAASC,SAAS,aAC7BT,GACEN,GAASoB,EAAAA,EAAAA,IAAmBF,EAAkBhB,IAClD,GACC,CAACI,EAAYN,EAAUS,EAASK,SAAUZ,IAE7C,MAMMgB,EAAoBG,IACxB,MAAMC,EAAQD,EAAQE,WAEtB,MAAO,CAAEC,KADIH,EAAQI,cACNH,MAAOA,EAAQ,EAAG,EAwBnC,OACEI,EAAAA,EAAAA,MAAA,OACEC,WAAWC,EAAAA,EAAAA,GAAK,eAAgBf,GAAkB,wBAAwBgB,SAAA,EAE1EC,EAAAA,EAAAA,KAACC,IAAU,CACTC,SAAU9B,EACV+B,SAAUC,GAXUA,KACxB/B,EAAgB+B,GAChBtB,GAAW,EAAK,EASMuB,CAAiBD,GACnCE,MAxCuBf,KAC3B,MAAMC,EAAQD,EAAQE,WAChBC,EAAOH,EAAQI,cACrB,MAAO,GAAG3B,EAAOwB,OAAWE,GAAM,EAqCvBa,CAAqBnC,GAC5BoC,gBAAiBA,KAAMC,OA7BDL,EA6BqBhC,OA5B3CS,IAGAF,EAASK,SAASC,SAAS,iBAC7Bf,GAASiB,EAAAA,EAAAA,IAAeC,EAAkBgB,KAExCzB,EAASK,SAASC,SAAS,eAC7Bf,GAASmB,EAAAA,EAAAA,IAAkBD,EAAkBgB,KAE3CrB,GACFb,GAASoB,EAAAA,EAAAA,IAAmBF,EAAkBgB,KAEhDtB,GAAW,KAbesB,KA6BmC,EACzDM,QAAS,IAAInC,KACboC,WAAW,UACXC,qBAAmB,KAErBZ,EAAAA,EAAAA,KAACa,EAAAA,EAAI,CACHC,KAAO/B,EAAmC,mBAAlB,gBACxBgC,MAAO,KACPC,OAAQ,KACRnB,UAAW,gBACXoB,mBAAoB,6BAElB,C,kCC1GV,QAA4B,2B,aCC5B,MAIA,EAJgBC,IAAmB,IAAlB,SAAEnB,GAAUmB,EAC3B,OAAOlB,EAAAA,EAAAA,KAAA,WAASH,UAAWsB,EAAYpB,SAAEA,GAAmB,C,2FCF9D,QAA4B,kCAA5B,EAA2E,mCAA3E,EAAyH,iCAAzH,EAAiK,6BAAjK,EAAuM,+BAAvM,EAAwP,wC,qDCQxP,MA8CA,EA9CuBqB,KACrB,MAAMC,GAAY5C,EAAAA,EAAAA,IAAY6C,EAAAA,IAC9B,OACE1B,EAAAA,EAAAA,MAAA2B,EAAAA,SAAA,CAAAxB,SAAA,CACGsB,IAAarB,EAAAA,EAAAA,KAACwB,EAAAA,EAAM,KACrBxB,EAAAA,EAAAA,KAACyB,EAAAA,EAAO,CAAA1B,UACNC,EAAAA,EAAAA,KAAC0B,EAAAA,EAAS,CAAA3B,UACRH,EAAAA,EAAAA,MAAA,OAAKC,UAAWsB,EAAYpB,SAAA,EAC1BH,EAAAA,EAAAA,MAAA,OAAKC,UAAWsB,EAAapB,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,OAAAD,UACEH,EAAAA,EAAAA,MAAA,MAAIC,UAAWsB,EAAWpB,SAAA,EACxBC,EAAAA,EAAAA,KAAA,MAAAD,UACEC,EAAAA,EAAAA,KAAC2B,EAAAA,GAAO,CACNC,GAAG,eACHC,KAAG,EACHhC,UAAWqB,IAAA,IAAC,SAAEY,GAAUZ,EAAA,OACtBY,EAAWX,EAAWA,CAAM,EAC7BpB,SACF,gBAIHC,EAAAA,EAAAA,KAAA,MAAAD,UACEC,EAAAA,EAAAA,KAAC2B,EAAAA,GAAO,CACN9B,UAAWkC,IAAA,IAAC,SAAED,GAAUC,EAAA,OACtBD,EAAWX,EAAWA,CAAM,EAE9BS,GAAG,aAAY7B,SAChB,uBAMPC,EAAAA,EAAAA,KAAA,OAAKH,UAAWsB,EAAkBpB,UAChCC,EAAAA,EAAAA,KAAC/B,EAAAA,EAAQ,UAGX+B,EAAAA,EAAAA,KAACgC,EAAAA,GAAM,aAId,C,kECjDA,MAAMC,EAAuBC,GAASA,EAAMC,WAAWC,aAEjDd,EAAoBY,GAASA,EAAMC,WAAWd,UAG9CgB,GAAgCC,EAAAA,EAAAA,IAC3C,CALoCJ,GAASA,EAAMC,WAAWI,iBAM9DA,IACE,MAAMC,EAAaD,EAAeE,QAChC,CAACC,EAAKC,IAASD,EAAMC,EAAKC,QAC1B,GAQF,OAN8BL,EAAeM,KAAIC,IACxC,IACFA,EACHC,YAAcD,EAASF,OAASJ,EAAc,KAAKQ,QAAQ,MAGnC,G","sources":["components/DateComp/DateComp.jsx","webpack://finances-planner/./src/components/Section/Section.module.scss?893f","components/Section/Section.jsx","webpack://finances-planner/./src/pages/StatisticsPage/StatisticsPage.module.scss?0652","pages/StatisticsPage/StatisticsPage.jsx","redux/transactions/transactionsSelector.js"],"sourcesContent":["\nimport { useEffect, useState } from 'react';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport './DateComp.scss';\nimport Icon from 'components/Icon/Icon';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  getCategoriesStat,\n  getTransaction,\n} from 'redux/transactions/transactionsOperations';\nimport { useLocation } from 'react-router-dom';\nimport { selectorIsLoggedIn } from 'redux/auth/authSelectors';\nimport clsx from 'clsx';\nimport { getDynamicsByMonth } from 'redux/dynamics/dynamicsOperations';\n\nconst months = [\n  'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July',\n  'August',\n  'September',\n  'October',\n  'November',\n  'December',\n];\n\nconst DateComp = () => {\n  const dispatch = useDispatch();\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const isLoggedIn = useSelector(selectorIsLoggedIn);\n  const location = useLocation();\n  const [isDirty, setIsDirty] = useState(false);\n\n  const isDynamicsPage = location.pathname.endsWith('dynamics');\n\n  useEffect(() => {\n    if (location.pathname.endsWith('transactions')) {\n      isLoggedIn && dispatch(getTransaction(changedDateForApi(selectedDate)));\n    }\n    if (location.pathname.endsWith('categories')) {\n      isLoggedIn &&\n        dispatch(getCategoriesStat(changedDateForApi(selectedDate)));\n    }\n    if (location.pathname.endsWith('dynamics')) {\n      isLoggedIn &&\n        dispatch(getDynamicsByMonth(changedDateForApi(selectedDate)));\n    }\n  }, [isLoggedIn, dispatch, location.pathname, selectedDate]);\n\n  const changedDateForPicker = newDate => {\n    const month = newDate.getMonth();\n    const year = newDate.getFullYear();\n    return `${months[month]}, ${year}`;\n  };\n\n  const changedDateForApi = newDate => {\n    const month = newDate.getMonth();\n    const year = newDate.getFullYear();\n    return { year, month: month + 1 };\n  };\n\n  const handleCloseCalendar = date => {\n    if (isDirty) {\n      return;\n    }\n    if (location.pathname.endsWith('transactions')) {\n      dispatch(getTransaction(changedDateForApi(date)));\n    }\n    if (location.pathname.endsWith('categories')) {\n      dispatch(getCategoriesStat(changedDateForApi(date)));\n    }\n    if (isDynamicsPage) {\n      dispatch(getDynamicsByMonth(changedDateForApi(date)));\n    }\n    setIsDirty(true);\n  };\n\n  const handleDateChange = (date) => {\n    setSelectedDate(date);\n    setIsDirty(true);\n  }\n\n  return (\n    <div\n      className={clsx('calendarWrap', isDynamicsPage && 'calendarDynamicsWrap')}\n    >\n      <DatePicker\n        selected={selectedDate}\n        onChange={date => handleDateChange(date)} // используем setSelectedDate, чтобы обновлять значение выбранной даты\n        value={changedDateForPicker(selectedDate)}\n        onCalendarClose={() => handleCloseCalendar(selectedDate)}\n        maxDate={new Date()}\n        dateFormat=\"MM/yyyy\"\n        showMonthYearPicker\n      />\n      <Icon\n        name={!isDynamicsPage ? 'icon-calendar' : 'icon-vector-down'}\n        width={'24'}\n        height={'24'}\n        className={'icon-calendar'}\n        secondaryClassName={'icon-claendar-dynamics'}\n      />\n    </div>\n  );\n};\n\nexport default DateComp;\n","// extracted by mini-css-extract-plugin\nexport default {\"vectorImg\":\"Section_vectorImg__zw3S9\"};","import s from './Section.module.scss';\n\nconst Section = ({ children }) => {\n  return <section className={s.vectorImg}>{children}</section>;\n};\n\nexport default Section;\n","// extracted by mini-css-extract-plugin\nexport default {\"statWrapp\":\"StatisticsPage_statWrapp__owdQz\",\"navWrapper\":\"StatisticsPage_navWrapper__o+Wo+\",\"navThumb\":\"StatisticsPage_navThumb__2sawr\",\"link\":\"StatisticsPage_link__zUktx\",\"active\":\"StatisticsPage_active__DfVns\",\"calendarWrapper\":\"StatisticsPage_calendarWrapper__+n5Db\"};","import Container from 'components/Container/Container';\nimport DateComp from 'components/DateComp/DateComp';\nimport { NavLink, Outlet } from 'react-router-dom';\nimport s from './StatisticsPage.module.scss';\nimport Section from 'components/Section/Section';\nimport Loader from 'components/Loader/Loader';\nimport { useSelector } from 'react-redux';\nimport { selectedIsLoading } from 'redux/transactions/transactionsSelector';\n\nconst StatisticsPage = () => {\n  const isLoading = useSelector(selectedIsLoading);\n  return (\n    <>\n      {isLoading && <Loader />}\n      <Section>\n        <Container>\n          <div className={s.statWrapp}>\n            <div className={s.navWrapper}>\n              <div>\n                <ul className={s.navThumb}>\n                  <li>\n                    <NavLink\n                      to=\"transactions\"\n                      end\n                      className={({ isActive }) =>\n                        isActive ? s.active : s.link\n                      }\n                    >\n                      Expenses\n                    </NavLink>\n                  </li>\n                  <li>\n                    <NavLink\n                      className={({ isActive }) =>\n                        isActive ? s.active : s.link\n                      }\n                      to=\"categories\"\n                    >\n                      Categories\n                    </NavLink>\n                  </li>\n                </ul>\n              </div>\n              <div className={s.calendarWrapper}>\n                <DateComp />\n              </div>\n            </div>\n              <Outlet />\n          </div>\n        </Container>\n      </Section>\n    </>\n  );\n};\n\nexport default StatisticsPage;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectedTransactions = state => state.statistics.transactions;\nexport const selectedCategoriesStat = state => state.statistics.categoriesStat;\nexport const selectedIsLoading = state => state.statistics.isLoading;\nexport const selectedError = state => state.statistics.error;\n\nexport const selectedChengedCategoriesStat = createSelector(\n  [selectedCategoriesStat],\n  categoriesStat => {\n    const totalSpend = categoriesStat.reduce(\n      (acc, item) => acc + item.amount,\n      0\n    );\n    const updatedCategoriesStat = categoriesStat.map(category => {\n      return {\n        ...category,\n        percentage: ((category.amount / totalSpend) * 100).toFixed(1),\n      };\n    });\n    return updatedCategoriesStat;\n  }\n);\n"],"names":["months","DateComp","dispatch","useDispatch","selectedDate","setSelectedDate","useState","Date","isLoggedIn","useSelector","selectorIsLoggedIn","location","useLocation","isDirty","setIsDirty","isDynamicsPage","pathname","endsWith","useEffect","getTransaction","changedDateForApi","getCategoriesStat","getDynamicsByMonth","newDate","month","getMonth","year","getFullYear","_jsxs","className","clsx","children","_jsx","DatePicker","selected","onChange","date","handleDateChange","value","changedDateForPicker","onCalendarClose","handleCloseCalendar","maxDate","dateFormat","showMonthYearPicker","Icon","name","width","height","secondaryClassName","_ref","s","StatisticsPage","isLoading","selectedIsLoading","_Fragment","Loader","Section","Container","NavLink","to","end","isActive","_ref2","Outlet","selectedTransactions","state","statistics","transactions","selectedChengedCategoriesStat","createSelector","categoriesStat","totalSpend","reduce","acc","item","amount","map","category","percentage","toFixed"],"sourceRoot":""}